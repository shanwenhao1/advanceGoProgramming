// Code generated by MockGen. DO NOT EDIT.
// Source: bookReadingNote/project/mock/mockMatter (interfaces: IF)

// Package mock_mockMatter is a generated GoMock package.
package mock_mockMatter

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIF is a mock of IF interface
type MockIF struct {
	ctrl     *gomock.Controller
	recorder *MockIFMockRecorder
}

// MockIFMockRecorder is the mock recorder for MockIF
type MockIFMockRecorder struct {
	mock *MockIF
}

// NewMockIF creates a new mock instance
func NewMockIF(ctrl *gomock.Controller) *MockIF {
	mock := &MockIF{ctrl: ctrl}
	mock.recorder = &MockIFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIF) EXPECT() *MockIFMockRecorder {
	return m.recorder
}

// SimpleMethod mocks base method
func (m *MockIF) SimpleMethod(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SimpleMethod", arg0)
}

// SimpleMethod indicates an expected call of SimpleMethod
func (mr *MockIFMockRecorder) SimpleMethod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimpleMethod", reflect.TypeOf((*MockIF)(nil).SimpleMethod), arg0)
}

// VariadicMethod mocks base method
func (m *MockIF) VariadicMethod(arg0 ...int) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "VariadicMethod", varargs...)
}

// VariadicMethod indicates an expected call of VariadicMethod
func (mr *MockIFMockRecorder) VariadicMethod(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariadicMethod", reflect.TypeOf((*MockIF)(nil).VariadicMethod), arg0...)
}
