// Code generated by MockGen. DO NOT EDIT.
// Source: bookReadingNote/project/CircuitAndHystrix/example/hystrixExample/hystrixManager (interfaces: HystrixI)

// Package mock_hystrixManager is a generated GoMock package.
package mock_hystrixManager

import (
	hystrixManager "bookReadingNote/project/CircuitAndHystrix/example/hystrixExample/hystrixManager"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHystrixI is a mock of HystrixI interface
type MockHystrixI struct {
	ctrl     *gomock.Controller
	recorder *MockHystrixIMockRecorder
}

// MockHystrixIMockRecorder is the mock recorder for MockHystrixI
type MockHystrixIMockRecorder struct {
	mock *MockHystrixI
}

// NewMockHystrixI creates a new mock instance
func NewMockHystrixI(ctrl *gomock.Controller) *MockHystrixI {
	mock := &MockHystrixI{ctrl: ctrl}
	mock.recorder = &MockHystrixIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHystrixI) EXPECT() *MockHystrixIMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockHystrixI) Run(arg0 hystrixManager.RunFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockHystrixIMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockHystrixI)(nil).Run), arg0)
}

// RunWithFallback mocks base method
func (m *MockHystrixI) RunWithFallback(arg0 hystrixManager.RunFunc, arg1 hystrixManager.FallbackFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithFallback", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithFallback indicates an expected call of RunWithFallback
func (mr *MockHystrixIMockRecorder) RunWithFallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithFallback", reflect.TypeOf((*MockHystrixI)(nil).RunWithFallback), arg0, arg1)
}
