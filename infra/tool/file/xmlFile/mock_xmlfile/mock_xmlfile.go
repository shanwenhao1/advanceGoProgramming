// Code generated by MockGen. DO NOT EDIT.
// Source: bookReadingNote/infra/tool/file/xmlFile (interfaces: XmlFile)

// Package mock_xmlFile is a generated GoMock package.
package mock_xmlFile

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockXmlFile is a mock of XmlFile interface
type MockXmlFile struct {
	ctrl     *gomock.Controller
	recorder *MockXmlFileMockRecorder
}

// MockXmlFileMockRecorder is the mock recorder for MockXmlFile
type MockXmlFileMockRecorder struct {
	mock *MockXmlFile
}

// NewMockXmlFile creates a new mock instance
func NewMockXmlFile(ctrl *gomock.Controller) *MockXmlFile {
	mock := &MockXmlFile{ctrl: ctrl}
	mock.recorder = &MockXmlFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockXmlFile) EXPECT() *MockXmlFileMockRecorder {
	return m.recorder
}

// LoadFile mocks base method
func (m *MockXmlFile) LoadFile(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFile", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFile indicates an expected call of LoadFile
func (mr *MockXmlFileMockRecorder) LoadFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFile", reflect.TypeOf((*MockXmlFile)(nil).LoadFile), arg0)
}
