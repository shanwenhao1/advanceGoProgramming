// Code generated by MockGen. DO NOT EDIT.
// Source: bookReadingNote/infra/db/dbTool (interfaces: DataBase)

// Package mock_dbTool is a generated GoMock package.
package mock_dbTool

import (
	dbTool "bookReadingNote/infra/db/dbTool"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
)

// MockDataBase is a mock of DataBase interface
type MockDataBase struct {
	ctrl     *gomock.Controller
	recorder *MockDataBaseMockRecorder
}

// MockDataBaseMockRecorder is the mock recorder for MockDataBase
type MockDataBaseMockRecorder struct {
	mock *MockDataBase
}

// NewMockDataBase creates a new mock instance
func NewMockDataBase(ctrl *gomock.Controller) *MockDataBase {
	mock := &MockDataBase{ctrl: ctrl}
	mock.recorder = &MockDataBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataBase) EXPECT() *MockDataBaseMockRecorder {
	return m.recorder
}

// Commit mocks base method
func (m *MockDataBase) Commit(arg0 *gorm.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Commit", arg0)
}

// Commit indicates an expected call of Commit
func (mr *MockDataBaseMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDataBase)(nil).Commit), arg0)
}

// Count mocks base method
func (m *MockDataBase) Count(arg0, arg1 interface{}, arg2 string, arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Count", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockDataBaseMockRecorder) Count(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDataBase)(nil).Count), varargs...)
}

// Create mocks base method
func (m *MockDataBase) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDataBaseMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataBase)(nil).Create), arg0)
}

// CreateOrm mocks base method
func (m *MockDataBase) CreateOrm(arg0 *gorm.DB, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrm indicates an expected call of CreateOrm
func (mr *MockDataBaseMockRecorder) CreateOrm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrm", reflect.TypeOf((*MockDataBase)(nil).CreateOrm), arg0, arg1)
}

// Delete mocks base method
func (m *MockDataBase) Delete(arg0 interface{}, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDataBaseMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDataBase)(nil).Delete), arg0, arg1)
}

// DeleteOrm mocks base method
func (m *MockDataBase) DeleteOrm(arg0 *gorm.DB, arg1 interface{}, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrm", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrm indicates an expected call of DeleteOrm
func (mr *MockDataBaseMockRecorder) DeleteOrm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrm", reflect.TypeOf((*MockDataBase)(nil).DeleteOrm), arg0, arg1, arg2)
}

// DeleteSqlIn mocks base method
func (m *MockDataBase) DeleteSqlIn(arg0 interface{}, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSqlIn", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSqlIn indicates an expected call of DeleteSqlIn
func (mr *MockDataBaseMockRecorder) DeleteSqlIn(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSqlIn", reflect.TypeOf((*MockDataBase)(nil).DeleteSqlIn), arg0, arg1, arg2)
}

// DeleteSqlInOrm mocks base method
func (m *MockDataBase) DeleteSqlInOrm(arg0 *gorm.DB, arg1 interface{}, arg2 string, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSqlInOrm", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSqlInOrm indicates an expected call of DeleteSqlInOrm
func (mr *MockDataBaseMockRecorder) DeleteSqlInOrm(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSqlInOrm", reflect.TypeOf((*MockDataBase)(nil).DeleteSqlInOrm), arg0, arg1, arg2, arg3)
}

// Get mocks base method
func (m *MockDataBase) Get(arg0 interface{}, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockDataBaseMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataBase)(nil).Get), arg0, arg1)
}

// GetOrm mocks base method
func (m *MockDataBase) GetOrm() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrm")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetOrm indicates an expected call of GetOrm
func (mr *MockDataBaseMockRecorder) GetOrm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrm", reflect.TypeOf((*MockDataBase)(nil).GetOrm))
}

// GetSqlBetween mocks base method
func (m *MockDataBase) GetSqlBetween(arg0 interface{}, arg1 map[string]interface{}, arg2 string, arg3, arg4 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSqlBetween", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSqlBetween indicates an expected call of GetSqlBetween
func (mr *MockDataBaseMockRecorder) GetSqlBetween(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlBetween", reflect.TypeOf((*MockDataBase)(nil).GetSqlBetween), arg0, arg1, arg2, arg3, arg4)
}

// GetSqlIn mocks base method
func (m *MockDataBase) GetSqlIn(arg0 interface{}, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSqlIn", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSqlIn indicates an expected call of GetSqlIn
func (mr *MockDataBaseMockRecorder) GetSqlIn(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlIn", reflect.TypeOf((*MockDataBase)(nil).GetSqlIn), arg0, arg1, arg2)
}

// GetSqlOr mocks base method
func (m *MockDataBase) GetSqlOr(arg0 interface{}, arg1 ...map[string]interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSqlOr", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSqlOr indicates an expected call of GetSqlOr
func (mr *MockDataBaseMockRecorder) GetSqlOr(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSqlOr", reflect.TypeOf((*MockDataBase)(nil).GetSqlOr), varargs...)
}

// GetWithPage mocks base method
func (m *MockDataBase) GetWithPage(arg0 interface{}, arg1 map[string]interface{}, arg2 dbTool.PageModel, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithPage", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetWithPage indicates an expected call of GetWithPage
func (mr *MockDataBaseMockRecorder) GetWithPage(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithPage", reflect.TypeOf((*MockDataBase)(nil).GetWithPage), varargs...)
}

// Rollback mocks base method
func (m *MockDataBase) Rollback(arg0 *gorm.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", arg0)
}

// Rollback indicates an expected call of Rollback
func (mr *MockDataBaseMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDataBase)(nil).Rollback), arg0)
}

// Save mocks base method
func (m *MockDataBase) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockDataBaseMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDataBase)(nil).Save), arg0)
}

// SaveOrm mocks base method
func (m *MockDataBase) SaveOrm(arg0 *gorm.DB, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrm indicates an expected call of SaveOrm
func (mr *MockDataBaseMockRecorder) SaveOrm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrm", reflect.TypeOf((*MockDataBase)(nil).SaveOrm), arg0, arg1)
}
